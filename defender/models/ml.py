from typing import List
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from tqdm.auto import tqdm
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import KFold, GridSearchCV, LeaveOneOut, RandomizedSearchCV
import os
from sklearn.model_selection import StratifiedKFold
from sklearn.neighbors import KNeighborsClassifier
from sklearn.decomposition import PCA, IncrementalPCA
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from defender.model import Model, competition_scorer, find_best_score
from sklearn.metrics import classification_report, confusion_matrix

from defender.utils import DikePEDataset, batched_fit_transform, create_batches, load_pickle
from sklearn.metrics import make_scorer
import warnings


class MLClassifier(Model):
    tmp_file = 'tmp_x.npy'

    @staticmethod
    def _init_parameters(d):
        return {'feature_extractor': d['feature_extractor']}
    
    def __init__(
            self, 
            feature_extractor, 
            pca_components: int = None,
        ) -> None:
        super().__init__()

        self.feature_extractor = feature_extractor
        self.scaler = StandardScaler()
        if pca_components is not None:
            self.pca = IncrementalPCA(n_components=self.pca_components, batch_size=self.pca_components)
        else:
            self.pca = None

    def extract_features(self, pe_files: List[str]):
        # return self.feature_extractor(pe_files, train=self.train)
        features, parsed_errors = self.feature_extractor(pe_files, enable_extractor=[0], train=self.train)
        if len(parsed_errors) != 0:
            raise Exception("Some files were not parsed")
        return features

    def __call__(self, x) -> np.array:
        x = self.pre_process(x)
        return self.pipe_grid.best_estimator_.predict_proba(x)[:,1]
    
    def pre_process(self, sparse_x):
        warnings.warn(f"Training mode is set to {self.train}")

        # sparse_x = sparse.hstack(sparse_x)
        # todo! use more feature information
        # use only one set of features
        sparse_x = sparse_x[0]

        # use memmap to handle large dataset during training
        if self.train:
            x = np.memmap(self.tmp_file, mode="w+", dtype=sparse_x.dtype, offset=0, shape=sparse_x.shape)
            for arr,start,end in create_batches(sparse_x):
                x[start:end,...] = arr.toarray()
        else:
            x = sparse_x.toarray()

        # scale data
        print("Scaling data...")
        if self.train:
            x = batched_fit_transform(x, self.scaler, batch_size=2000)
        else:
            x = self.scaler.transform(x)

        # apply pca
        # todo! maybe use pca
        if self.pca is not None:
            print("Apply pca...")
            if self.train:
                x = batched_fit_transform(x, self.pca, batch_size=max(self.pca.n_components, 500), combine_last=True)
                print(self.pca.explained_variance_ratio_.sum())

                # n_components = (self.pca.explained_variance_ratio_.cumsum() > 0.9).nonzero()[0][0]
                # x = x[:, :n_components]
                # self.pca.n_components = n_components
            else:
                x = self.pca.transform(x)

        return x

    def fit(self, x, y, n_jobs=8):
        super().fit()

        self.train = True
        x = self.pre_process(x)

        # Define hyperparameters grid for all classifiers
        pipeline = Pipeline([('classifier', None)])
        params = [
            # {
            #     'classifier': [SVC(probability=True)],
            #     'classifier__C': [0.1, 1, 10],
            #     'classifier__kernel': ['linear', 'rbf', 'poly'],
            # },
            {
                'classifier': [RandomForestClassifier(max_depth=None)],
                'classifier__n_estimators': [600, 800, 1000, 1200],
                'classifier__max_depth': [None, 40, 50, 60],
                'classifier__max_features': [None, 'log2', 'sqrt'],
            },
            # {
            #     'classifier': [KNeighborsClassifier()],
            #     'classifier__n_neighbors': [3, 5, 10, 100],
            #     'classifier__weights': ['uniform', 'distance'],
            # }
        ] 

        # cross validation search
        print("Starting training...")
        # folds = StratifiedKFold(n_splits=3, shuffle=True, random_state=None)
        self.pipe_grid = GridSearchCV(
            pipeline, 
            params, 
            scoring=make_scorer(find_best_score, greater_is_better=True, needs_proba=True), 
            cv=3, 
            refit=True,
            verbose=4,
            n_jobs=n_jobs,
        ).fit(x, y)

        # Print results
        cols = ['params', 'mean_test_score', 'std_test_score', 'rank_test_score']
        print(pd.DataFrame(self.pipe_grid.cv_results_)[cols].sort_values(by='rank_test_score').head().T)
        print("Best parameters: ", self.pipe_grid.best_params_)
        print("Best Matthews correlation coefficient: ", self.pipe_grid.best_score_)

        # choose best threshold
        best_score, self.best_threshold = find_best_score(
            y_true=y, 
            y_pred=self.pipe_grid.predict_proba(x)[:,1], 
            return_threshold=True,
        )
        print(f"Best threshold {self.best_threshold} with score {best_score}")
        

if __name__ == '__main__':
    # train and save model
    sparse_x, y = load_pickle('data/train.pkl')
    feature_extractor = load_pickle('data/feature_extractor.pkl')
    model = MLClassifier(feature_extractor)
    model.fit(sparse_x,y)
    model.save('defender/ml_classifier.pkl')

    # test results
    sparse_x, y = load_pickle('data/test.pkl')
    model = Model.load('defender/ml_classifier.pkl')
    model.train = False
    print(model.evaluate(sparse_x,y))
    model.save('defender/ml_classifier.pkl')


    '''
    Current best model (test scores: mcc, f1, fpr, tpr)
    ----------------------------------------------------
    (0.9966334650644774, 0.9977628635346756, 0.9999833967593016, 0.0022675736961451248, 1.0)


    '''

    # cols = ['params', 'mean_test_score', 'std_test_score', 'rank_test_score']
    # print(results[cols].to_latex(index=False))


    # todo! obfuscate and docker


    # todo augment with packers
    # todo use transformers to train model
    # todo? libauc to train
