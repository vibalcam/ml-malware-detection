import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from tqdm.auto import tqdm
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import KFold, GridSearchCV, LeaveOneOut, RandomizedSearchCV
import os
from sklearn.model_selection import StratifiedKFold
from sklearn.neighbors import KNeighborsClassifier
from sklearn.decomposition import PCA, IncrementalPCA
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from models.Model import Model, competition_scorer, find_best_score
from sklearn.metrics import classification_report, confusion_matrix

from models.utils import DikePEDataset, batched_fit_transform, create_batches, load_pickle
from sklearn.metrics import make_scorer
from spicy import sparse


class MLClassifier(Model):
    tmp_file = 'tmp_x.npy'

    def __init__(
            self, 
            feature_extractor, 
            use_pca=False,
            batch_size:int = 500
        ) -> None:
        super().__init__(feature_extractor)

        self.batch_size = batch_size
        self.use_pca = use_pca

    def __call__(self, x) -> np.array:
        x = self.pre_process(x)
        return self.pipe_grid.best_estimator_.predict_proba(x)[:,1]
    
    def pre_process(self, sparse_x):
        # concatenate all features
        # sparse_x = sparse.hstack(sparse_x)
        # todo! use more feature information
        # todo! limit extract features used
        sparse_x = sparse_x[0]

        # use memmap to handle large dataset
        x = np.memmap(self.tmp_file, mode="w+", dtype=sparse_x.dtype, offset=0, shape=sparse_x.shape)
        for arr,start,end in create_batches(sparse_x):
            x[start:end,...] = arr.toarray()

        # scale data
        print("Scaling data...")
        self.scaler = StandardScaler()
        x = batched_fit_transform(x, self.scaler, batch_size=2000)

        # apply pca
        # todo! maybe use pca
        if self.use_pca:
            print("Apply pca...")
            self.pca = IncrementalPCA(n_components=self.batch_size, batch_size=self.batch_size)
            x = batched_fit_transform(x, self.pca, batch_size=self.batch_size, combine_last=True)
            
            print(self.pca.explained_variance_ratio_.sum())

            # n_components = (self.pca.explained_variance_ratio_.cumsum() > 0.9).nonzero()[0][0]
            # x = x[:, :n_components]
            # self.pca.n_components = n_components

        return x

    def train(self, x, y, n_jobs=6):
        x = self.pre_process(x)

        # Define hyperparameters grid for all classifiers
        pipeline = Pipeline(
            [('classifier', None)],
            verbose=False,
        )
        params = [
            # {
            #     'classifier': [SVC(probability=True)],
            #     'classifier__C': [0.1, 1, 10],
            #     'classifier__kernel': ['linear', 'rbf', 'poly'],
            # },
            {
                'classifier': [RandomForestClassifier(max_depth=None)],
                'classifier__n_estimators': [600, 800, 1000, 1200],
                'classifier__max_depth': [None, 40, 50, 60],
            },
            # {
            #     'classifier': [KNeighborsClassifier()],
            #     'classifier__n_neighbors': [3, 5, 10, 100],
            #     'classifier__weights': ['uniform', 'distance'],
            # }
        ] 

        # cross validation search
        print("Starting training...")
        # folds = StratifiedKFold(n_splits=3, shuffle=True, random_state=None)
        self.pipe_grid = GridSearchCV(
            pipeline, 
            params, 
            scoring=make_scorer(find_best_score, greater_is_better=True, needs_proba=True), 
            cv=3, 
            refit=True,
            verbose=4,
            n_jobs=n_jobs,
        ).fit(x, y)

        # Print results
        cols = ['params', 'mean_test_score', 'std_test_score', 'rank_test_score']
        print(pd.DataFrame(self.pipe_grid.cv_results_)[cols].sort_values(by='rank_test_score').head())
        print("Best parameters: ", self.pipe_grid.best_params_)
        print("Best Matthews correlation coefficient: ", self.pipe_grid.best_score_)

        # choose best threshold
        scores = []
        y_pred = self.pipe_grid.predict_proba(x)[:,1]
        thresholds = np.linspace(1, 10, 101)/100
        for k in thresholds:
            score = competition_scorer(
                y_true=y, 
                y_pred=y_pred,
                threshold=k,
            )
            scores.append(score)
        best_idx = np.argmax(scores)
        self.best_threshold = thresholds[best_idx]
        print(f"Best threshold {self.best_threshold} with score {scores[best_idx]}")


if __name__ == '__main__':
    # dataset
    sparse_x, y = load_pickle('data/train.pkl')

    # train and save model
    feature_extractor = load_pickle('data/feature_extractor.pkl')
    model = MLClassifier(feature_extractor)
    model.train(sparse_x,y)
    model.save('ml_classifier.pkl')

    # test results
    sparse_x, y = load_pickle('data/test.pkl')
    print(model.evaluate(sparse_x,y))


    # cols = ['params', 'mean_test_score', 'std_test_score', 'rank_test_score']
    # print(results[cols].to_latex(index=False))


    # todo! incorporate into docker app

    

    # todo! augment with packers
    # todo! use transformers to train model
    # todo? libauc to train
