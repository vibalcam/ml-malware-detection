import argparse
import os
import py_compile
import glob
from pathlib import Path
import shutil

# pip install python-minifier
# before using make sure to do it on a copy since it modifies in place
# pyminify defender/ --in-place --remove-literal-statements

parser = argparse.ArgumentParser()
parser.add_argument('-m', '--model', type=str, required=True)
args = parser.parse_args()

# Set the directory containing the Python source files
dir_path = "defender"
output_path = "docker"
Path(output_path).mkdir(parents=True, exist_ok=True)

# Loop through all files in the directory
print("Compiling files...")
for filename in glob.glob(f"{dir_path}/**/*", recursive=True):
    # Check if the file is a Python source file
    if filename.endswith(".py"):
        # Compile the source file and get the path to the resulting bytecode file
        pyc_path = py_compile.compile(filename)
        
        # Rename the bytecode file with the custom suffix
        new_pyc_path = pyc_path.split('.')
        path_module = new_pyc_path[0].split('/')
        name_file = path_module.pop(-1)
        del path_module[0]
        del path_module[-1]
        path_module = os.path.join(output_path, *path_module)
        Path(path_module).mkdir(parents=True, exist_ok=True)
        os.rename(pyc_path, os.path.join(path_module, name_file) + '.' + new_pyc_path[2])

# Copy the model
print("Copying chosen model...")
model_dest = f"{output_path}/random_classifier.pkl"
shutil.copy(args.model, model_dest)
